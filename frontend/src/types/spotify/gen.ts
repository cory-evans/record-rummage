// Code generated by tygo. DO NOT EDIT.

import { ID, Numeric, URI, Image, Followers, Error } from './base';
//////////
// source: album.go

/**
 * SimpleAlbum contains basic data about an album.
 */
export interface SimpleAlbum {
  /**
   * The name of the album.
   */
  name: string;
  /**
   * A slice of SimpleArtists
   */
  artists: SimpleArtist[];
  /**
   * The field is present when getting an artist’s
   * albums. Possible values are “album”, “single”,
   * “compilation”, “appears_on”. Compare to album_type
   * this field represents relationship between the artist
   * and the album.
   */
  album_group: string;
  /**
   * The type of the album: one of "album",
   * "single", or "compilation".
   */
  album_type: string;
  /**
   * The SpotifyID for the album.
   */
  id: ID;
  /**
   * The SpotifyURI for the album.
   */
  uri: URI;
  /**
   * The markets in which the album is available,
   * identified using ISO 3166-1 alpha-2 country
   * codes.  Note that al album is considered
   * available in a market when at least 1 of its
   * tracks is available in that market.
   */
  available_markets: string[];
  /**
   * A link to the Web API endpoint providing full
   * details of the album.
   */
  href: string;
  /**
   * The cover art for the album in various sizes,
   * widest first.
   */
  images: Image[];
  /**
   * Known external URLs for this album.
   */
  external_urls: { [key: string]: string };
  /**
   * The date the album was first released.  For example, "1981-12-15".
   * Depending on the ReleaseDatePrecision, it might be shown as
   * "1981" or "1981-12". You can use ReleaseDateTime to convert this
   * to a time.Time value.
   */
  release_date: string;
  /**
   * The precision with which ReleaseDate value is known: "year", "month", or "day"
   */
  release_date_precision: string;
}
/**
 * Copyright contains the copyright statement associated with an album.
 */
export interface Copyright {
  /**
   * The copyright text for the album.
   */
  text: string;
  /**
   * The type of copyright.
   */
  type: string;
}
/**
 * FullAlbum provides extra album data in addition to the data provided by SimpleAlbum.
 */
export interface FullAlbum {
  SimpleAlbum: SimpleAlbum;
  copyrights: Copyright[];
  genres: string[];
  /**
   * The popularity of the album, represented as an integer between 0 and 100,
   * with 100 being the most popular.  Popularity of an album is calculated
   * from the popularity of the album's individual tracks.
   */
  popularity: Numeric;
  tracks: SimpleTrackPage;
  external_ids: { [key: string]: string };
}
/**
 * SavedAlbum provides info about an album saved to an user's account.
 */
export interface SavedAlbum {
  /**
   * The date and time the track was saved, represented as an ISO
   * 8601 UTC timestamp with a zero offset (YYYY-MM-DDTHH:MM:SSZ).
   * You can use the TimestampLayout constant to convert this to
   * a time.Time value.
   */
  added_at: string;
  album: FullAlbum;
}
/**
 * AlbumType represents the type of an album. It can be used to filter
 * results when searching for albums.
 */
export type AlbumType = number /* int */;
/**
 * AlbumType values that can be used to filter which types of albums are
 * searched for.  These are flags that can be bitwise OR'd together
 * to search for multiple types of albums simultaneously.
 */
export const AlbumTypeAlbum: AlbumType = 1 << 0;
/**
 * AlbumType values that can be used to filter which types of albums are
 * searched for.  These are flags that can be bitwise OR'd together
 * to search for multiple types of albums simultaneously.
 */
export const AlbumTypeSingle: AlbumType = 1 << 1;
/**
 * AlbumType values that can be used to filter which types of albums are
 * searched for.  These are flags that can be bitwise OR'd together
 * to search for multiple types of albums simultaneously.
 */
export const AlbumTypeAppearsOn: AlbumType = 1 << 2;
/**
 * AlbumType values that can be used to filter which types of albums are
 * searched for.  These are flags that can be bitwise OR'd together
 * to search for multiple types of albums simultaneously.
 */
export const AlbumTypeCompilation: AlbumType = 1 << 3;

//////////
// source: artist.go

/**
 * SimpleArtist contains basic info about an artist.
 */
export interface SimpleArtist {
  name: string;
  id: ID;
  /**
   * The Spotify URI for the artist.
   */
  uri: URI;
  /**
   * A link to the Web API endpoint providing full details of the artist.
   */
  href: string;
  external_urls: { [key: string]: string };
}
/**
 * FullArtist provides extra artist data in addition to what is provided by SimpleArtist.
 */
export interface FullArtist {
  SimpleArtist: SimpleArtist;
  /**
   * The popularity of the artist, expressed as an integer between 0 and 100.
   * The artist's popularity is calculated from the popularity of the artist's tracks.
   */
  popularity: Numeric;
  /**
   * A list of genres the artist is associated with.  For example, "Prog Rock"
   * or "Post-Grunge".  If not yet classified, the slice is empty.
   */
  genres: string[];
  followers: Followers;
  /**
   * Images of the artist in various sizes, widest first.
   */
  images: Image[];
}

//////////
// source: audio_analysis.go

/**
 * AudioAnalysis contains a detailed audio analysis for a single track
 * identified by its unique Spotify ID. See:
 * https://developer.spotify.com/web-api/get-audio-analysis/
 */
export interface AudioAnalysis {
  bars: Marker[];
  beats: Marker[];
  meta: AnalysisMeta;
  sections: Section[];
  segments: Segment[];
  tatums: Marker[];
  track: AnalysisTrack;
}
/**
 * Marker represents beats, bars, tatums and are used in segment and section
 * descriptions.
 */
export interface Marker {
  start: number /* float64 */;
  duration: number /* float64 */;
  confidence: number /* float64 */;
}
/**
 * AnalysisMeta describes details about Spotify's audio analysis of the track
 */
export interface AnalysisMeta {
  analyzer_version: string;
  platform: string;
  detailed_status: string;
  status: number /* int */;
  timestamp: number /* int64 */;
  analysis_time: number /* float64 */;
  input_process: string;
}
/**
 * Section represents a large variation in rhythm or timbre, e.g. chorus, verse,
 * bridge, guitar solo, etc. Each section contains its own descriptions of
 * tempo, key, mode, time_signature, and loudness.
 */
export interface Section {
  Marker: Marker;
  loudness: number /* float64 */;
  tempo: number /* float64 */;
  tempo_confidence: number /* float64 */;
  key: Key;
  key_confidence: number /* float64 */;
  mode: Mode;
  mode_confidence: number /* float64 */;
  time_signature: Numeric;
  time_signature_confidence: number /* float64 */;
}
/**
 * Segment is characterized by it's perceptual onset and duration in seconds,
 * loudness (dB), pitch and timbral content.
 */
export interface Segment {
  Marker: Marker;
  loudness_start: number /* float64 */;
  loudness_max_time: number /* float64 */;
  loudness_max: number /* float64 */;
  loudness_end: number /* float64 */;
  pitches: number /* float64 */[];
  timbre: number /* float64 */[];
}
/**
 * AnalysisTrack contains audio analysis data about the track as a whole
 */
export interface AnalysisTrack {
  num_samples: number /* int64 */;
  duration: number /* float64 */;
  sample_md5: string;
  offset_seconds: Numeric;
  window_seconds: Numeric;
  analysis_sample_rate: number /* int64 */;
  analysis_channels: Numeric;
  end_of_fade_in: number /* float64 */;
  start_of_fade_out: number /* float64 */;
  loudness: number /* float64 */;
  tempo: number /* float64 */;
  tempo_confidence: number /* float64 */;
  time_signature: Numeric;
  time_signature_confidence: number /* float64 */;
  key: Key;
  key_confidence: number /* float64 */;
  mode: Mode;
  mode_confidence: number /* float64 */;
  codestring: string;
  code_version: number /* float64 */;
  echoprintstring: string;
  echoprint_version: number /* float64 */;
  synchstring: string;
  synch_version: number /* float64 */;
  rhythmstring: string;
  rhythm_version: number /* float64 */;
}

//////////
// source: audio_features.go

/**
 * AudioFeatures contains various high-level acoustic attributes
 * for a particular track.
 */
export interface AudioFeatures {
  /**
   * Acousticness is a confidence measure from 0.0 to 1.0 of whether
   * the track is acoustic.  A value of 1.0 represents high confidence
   * that the track is acoustic.
   */
  acousticness: number /* float32 */;
  /**
   * An HTTP URL to access the full audio analysis of the track.
   * The URL is cryptographically signed and configured to expire
   * after roughly 10 minutes.  Do not store these URLs for later use.
   */
  analysis_url: string;
  /**
   * Danceability describes how suitable a track is for dancing based
   * on a combination of musical elements including tempo, rhythm stability,
   * beat strength, and overall regularity.  A value of 0.0 is least danceable
   * and 1.0 is most danceable.
   */
  danceability: number /* float32 */;
  /**
   * The length of the track in milliseconds.
   */
  duration_ms: Numeric;
  /**
   * Energy is a measure from 0.0 to 1.0 and represents a perceptual measure
   * of intensity and activity.  Typically, energetic tracks feel fast, loud,
   * and noisy.
   */
  energy: number /* float32 */;
  /**
   * The Spotify ID for the track.
   */
  id: ID;
  /**
   * Predicts whether a track contains no vocals.  "Ooh" and "aah" sounds are
   * treated as instrumental in this context.  Rap or spoken words are clearly
   * "vocal".  The closer the Instrumentalness value is to 1.0, the greater
   * likelihood the track contains no vocal content.  Values above 0.5 are
   * intended to represent instrumental tracks, but confidence is higher as the
   * value approaches 1.0.
   */
  instrumentalness: number /* float32 */;
  /**
   * The key the track is in.  Integers map to pitches using standard Pitch Class notation
   * (https://en.wikipedia.org/wiki/Pitch_class).
   */
  key: Numeric;
  /**
   * Detects the presence of an audience in the recording.  Higher liveness
   * values represent an increased probability that the track was performed live.
   * A value above 0.8 provides strong likelihood that the track is live.
   */
  liveness: number /* float32 */;
  /**
   * The overall loudness of a track in decibels (dB).  Loudness values are
   * averaged across the entire track and are useful for comparing the relative
   * loudness of tracks.  Typical values range between -60 and 0 dB.
   */
  loudness: number /* float32 */;
  /**
   * Mode indicates the modality (major or minor) of a track.
   */
  mode: Numeric;
  /**
   * Detects the presence of spoken words in a track.  The more exclusively
   * speech-like the recording, the closer to 1.0 the speechiness will be.
   * Values above 0.66 describe tracks that are probably made entirely of
   * spoken words.  Values between 0.33 and 0.66 describe tracks that may
   * contain both music and speech, including such cases as rap music.
   * Values below 0.33 most likely represent music and other non-speech-like tracks.
   */
  speechiness: number /* float32 */;
  /**
   * The overall estimated tempo of the track in beats per minute (BPM).
   */
  tempo: number /* float32 */;
  /**
   * An estimated overall time signature of a track.  The time signature (meter)
   * is a notational convention to specify how many beats are in each bar (or measure).
   */
  time_signature: Numeric;
  /**
   * A link to the Web API endpoint providing full details of the track.
   */
  track_href: string;
  /**
   * The Spotify URI for the track.
   */
  uri: URI;
  /**
   * A measure from 0.0 to 1.0 describing the musical positiveness conveyed
   * by a track.  Tracks with high valence sound more positive (e.g. happy,
   * cheerful, euphoric), while tracks with low valence sound more negative
   * (e.g. sad, depressed, angry).
   */
  valence: number /* float32 */;
}
/**
 * Key represents a pitch using Pitch Class notation.
 */
export type Key = number /* int */;
export const C: Key = 0;
export const CSharp: Key = 1;
export const D: Key = 2;
export const DSharp: Key = 3;
export const E: Key = 4;
export const F: Key = 5;
export const FSharp: Key = 6;
export const G: Key = 7;
export const GSharp: Key = 8;
export const A: Key = 9;
export const ASharp: Key = 10;
export const B: Key = 11;
export const DFlat = CSharp;
export const EFlat = DSharp;
export const GFlat = FSharp;
export const AFlat = GSharp;
export const BFlat = ASharp;
/**
 * Mode indicates the modality (major or minor) of a track.
 */
export type Mode = number /* int */;
export const Minor: Mode = 0;
export const Major: Mode = 1;

//////////
// source: category.go

/**
 * Category is used by Spotify to tag items in.  For example, on the Spotify
 * player's "Browse" tab.
 */
export interface Category {
  /**
   * A link to the Web API endpoint returning full details of the category
   */
  href: string;
  /**
   * The category icon, in various sizes
   */
  icons: Image[];
  /**
   * The Spotify category ID.  This isn't a base-62 Spotify ID, its just
   * a short string that describes and identifies the category (ie "party").
   */
  id: string;
  /**
   * The name of the category
   */
  name: string;
}

//////////
// source: countries.go

/**
 * ISO 3166-1 alpha 2 country codes.
 * see: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
 */
export const CountryArgentina = 'AR';
/**
 * ISO 3166-1 alpha 2 country codes.
 * see: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
 */
export const CountryAustralia = 'AU';
/**
 * ISO 3166-1 alpha 2 country codes.
 * see: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
 */
export const CountryAustria = 'AT';
/**
 * ISO 3166-1 alpha 2 country codes.
 * see: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
 */
export const CountryBelarus = 'BY';
/**
 * ISO 3166-1 alpha 2 country codes.
 * see: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
 */
export const CountryBelgium = 'BE';
/**
 * ISO 3166-1 alpha 2 country codes.
 * see: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
 */
export const CountryBrazil = 'BR';
/**
 * ISO 3166-1 alpha 2 country codes.
 * see: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
 */
export const CountryCanada = 'CA';
/**
 * ISO 3166-1 alpha 2 country codes.
 * see: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
 */
export const CountryChile = 'CL';
/**
 * ISO 3166-1 alpha 2 country codes.
 * see: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
 */
export const CountryChina = 'CN';
/**
 * ISO 3166-1 alpha 2 country codes.
 * see: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
 */
export const CountryGermany = 'DE';
/**
 * ISO 3166-1 alpha 2 country codes.
 * see: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
 */
export const CountryHongKong = 'HK';
/**
 * ISO 3166-1 alpha 2 country codes.
 * see: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
 */
export const CountryIreland = 'IE';
/**
 * ISO 3166-1 alpha 2 country codes.
 * see: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
 */
export const CountryIndia = 'IN';
/**
 * ISO 3166-1 alpha 2 country codes.
 * see: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
 */
export const CountryItaly = 'IT';
/**
 * ISO 3166-1 alpha 2 country codes.
 * see: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
 */
export const CountryJapan = 'JP';
/**
 * ISO 3166-1 alpha 2 country codes.
 * see: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
 */
export const CountrySpain = 'ES';
/**
 * ISO 3166-1 alpha 2 country codes.
 * see: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
 */
export const CountryFinland = 'FI';
/**
 * ISO 3166-1 alpha 2 country codes.
 * see: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
 */
export const CountryFrance = 'FR';
/**
 * ISO 3166-1 alpha 2 country codes.
 * see: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
 */
export const CountryMexico = 'MX';
/**
 * ISO 3166-1 alpha 2 country codes.
 * see: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
 */
export const CountryNewZealand = 'NZ';
/**
 * ISO 3166-1 alpha 2 country codes.
 * see: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
 */
export const CountryRussia = 'RU';
/**
 * ISO 3166-1 alpha 2 country codes.
 * see: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
 */
export const CountrySwitzerland = 'CH';
/**
 * ISO 3166-1 alpha 2 country codes.
 * see: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
 */
export const CountryUnitedArabEmirates = 'AE';
/**
 * ISO 3166-1 alpha 2 country codes.
 * see: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
 */
export const CountryUnitedKingdom = 'GB';
/**
 * ISO 3166-1 alpha 2 country codes.
 * see: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
 */
export const CountryUSA = 'US';

//////////
// source: cursor.go

/**
 * Cursor contains a key that can be used to find the next set
 * of items.
 */
export interface Cursor {
  after: string;
}
/**
 * cursorPage contains all of the fields in a Spotify cursor-based
 * paging object, except for the actual items.  This type is meant
 * to be embedded in other types that add the Items field.
 */
/**
 * FullArtistCursorPage is a cursor-based paging object containing
 * a set of FullArtist objects.
 */
export interface FullArtistCursorPage {
  items: FullArtist[];
}

//////////
// source: page.go

interface basePage {
  /**
   * A link to the Web API endpoint returning the full result of the request.
   */
  href: string;
  /**
   * The maximum number of items in the response (as set in the query or by default).
   */
  limit: Numeric;
  /**
   * The offset of the items returned (as set in the query or by default).
   */
  offset: Numeric;
  /**
   * The total number of items available to return.
   */
  total: Numeric;

  next: string;
  previous: string;
}

/**
 * basePage contains all of the fields in a Spotify paging object, except
 * for the actual items.  This type is meant to be embedded in other types
 * that add the Items field.
 */
/**
 * FullArtistPage contains FullArtists returned by the Web API.
 */
export interface FullArtistPage extends basePage {
  items: FullArtist[];
}
/**
 * SimpleAlbumPage contains SimpleAlbums returned by the Web API.
 */
export interface SimpleAlbumPage {
  items: SimpleAlbum[];
}
/**
 * SavedAlbumPage contains SavedAlbums returned by the Web API.
 */
export interface SavedAlbumPage {
  items: SavedAlbum[];
}
/**
 * SavedShowPage contains SavedShows returned by the Web API
 */
export interface SavedShowPage {
  items: SavedShow[];
}
/**
 * SimplePlaylistPage contains SimplePlaylists returned by the Web API.
 */
export interface SimplePlaylistPage extends basePage {
  items: SimplePlaylist[];
}
/**
 * SimpleTrackPage contains SimpleTracks returned by the Web API.
 */
export interface SimpleTrackPage {
  items: SimpleTrack[];
}
/**
 * FullTrackPage contains FullTracks returned by the Web API.
 */
export interface FullTrackPage {
  items: FullTrack[];
}
/**
 * SavedTrackPage contains SavedTracks return by the Web API.
 */
export interface SavedTrackPage {
  items: SavedTrack[];
}
/**
 * PlaylistTrackPage contains information about tracks in a playlist.
 */
export interface PlaylistTrackPage {
  items: PlaylistTrack[];
}
/**
 * CategoryPage contains Category objects returned by the Web API.
 */
export interface CategoryPage {
  items: Category[];
}
/**
 * SimpleEpisodePage contains EpisodePage returned by the Web API.
 */
export interface SimpleEpisodePage {
  items: EpisodePage[];
}
/**
 * SimpleShowPage contains ShowPage returned by the Web API.
 */
export interface SimpleShowPage {
  items: FullShow[];
}
/**
 * pageable is an internal interface for types that support paging
 * by embedding basePage.
 */

//////////
// source: player.go

/**
 * PlayerDevice contains information about a device that a user can play music on
 */
export interface PlayerDevice {
  /**
   * ID of the device. This may be empty.
   */
  id: ID;
  /**
   * Active If this device is the currently active device.
   */
  is_active: boolean;
  /**
   * Restricted Whether controlling this device is restricted. At present if
   * this is "true" then no Web API commands will be accepted by this device.
   */
  is_restricted: boolean;
  /**
   * Name The name of the device.
   */
  name: string;
  /**
   * Type of device, such as "Computer", "Smartphone" or "Speaker".
   */
  type: string;
  /**
   * Volume The current volume in percent.
   */
  volume_percent: Numeric;
}
/**
 * PlayerState contains information about the current playback.
 */
export interface PlayerState {
  CurrentlyPlaying: CurrentlyPlaying;
  /**
   * Device The device that is currently active
   */
  device: PlayerDevice;
  /**
   * ShuffleState Shuffle is on or off
   */
  shuffle_state: boolean;
  /**
   * RepeatState off, track, context
   */
  repeat_state: string;
}
/**
 * PlaybackContext is the playback context
 */
export interface PlaybackContext {
  /**
   * ExternalURLs of the context, or null if not available.
   */
  external_urls: { [key: string]: string };
  /**
   * Endpoint of the context, or null if not available.
   */
  href: string;
  /**
   * Type of the item's context. Can be one of album, artist or playlist.
   */
  type: string;
  /**
   * URI is the Spotify URI for the context.
   */
  uri: URI;
}
/**
 * CurrentlyPlaying contains the information about currently playing items
 */
export interface CurrentlyPlaying {
  /**
   * Timestamp when data was fetched
   */
  timestamp: number /* int64 */;
  /**
   * PlaybackContext current context
   */
  context: PlaybackContext;
  /**
   * Progress into the currently playing track.
   */
  progress_ms: Numeric;
  /**
   * Playing If something is currently playing.
   */
  is_playing: boolean;
  /**
   * The currently playing track. Can be null.
   */
  item?: FullTrack;
}
export interface RecentlyPlayedItem {
  /**
   * Track is the track information
   */
  track: SimpleTrack;
  /**
   * PlayedAt is the time that this song was played
   */
  played_at: string /* RFC3339 */;
  /**
   * PlaybackContext is the current playback context
   */
  context: PlaybackContext;
}
export interface RecentlyPlayedResult {
  items: RecentlyPlayedItem[];
}
/**
 * PlaybackOffset can be specified either by track URI OR Position. If the
 * Position field is set to a non-nil pointer, it will be taken into
 * consideration when specifying the playback offset. If the Position field is
 * set to a nil pointer, it will be ignored and only the URI will be used to
 * specify the offset. If both are present the request will return 400 BAD
 * REQUEST. If incorrect values are provided for position or uri, the request
 * may be accepted but with an unpredictable resulting action on playback.
 */
export interface PlaybackOffset {
  /**
   * Position is zero based and can’t be negative.
   */
  position?: number /* int */;
  /**
   * URI is a string representing the uri of the item to start at.
   */
  uri?: URI;
}
export interface PlayOptions {
  /**
   * PlaybackContext Spotify URI of the context to play.
   * Valid contexts are albums, artists & playlists.
   */
  context_uri?: URI;
  /**
   * URIs Array of the Spotify track URIs to play
   */
  uris?: URI[];
  /**
   * PlaybackOffset Indicates from where in the context playback should start.
   * Only available when context corresponds to an album or playlist
   * object, or when the URIs parameter is used.
   */
  offset?: PlaybackOffset;
  /**
   * PositionMs Indicates from what position to start playback.
   * Must be a positive number. Passing in a position that is greater
   * than the length of the track will cause the player to start playing the next song.
   * Defaults to 0, starting a track from the beginning.
   */
  position_ms?: Numeric;
}
/**
 * RecentlyPlayedOptions describes options for the recently-played request. All
 * fields are optional. Only one of `AfterEpochMs` and `BeforeEpochMs` may be
 * given. Note that it seems as if Spotify only remembers the fifty most-recent
 * tracks as of right now.
 */
export interface RecentlyPlayedOptions {
  /**
   * Limit is the maximum number of items to return. Must be no greater than
   * fifty.
   */
  Limit: Numeric;
  /**
   * AfterEpochMs is a Unix epoch in milliseconds that describes a time after
   * which to return songs.
   */
  AfterEpochMs: number /* int64 */;
  /**
   * BeforeEpochMs is a Unix epoch in milliseconds that describes a time
   * before which to return songs.
   */
  BeforeEpochMs: number /* int64 */;
}
export interface Queue {
  currently_playing: FullTrack;
  queue: FullTrack[];
}

//////////
// source: playlist.go

/**
 * PlaylistTracks contains details about the tracks in a playlist.
 */
export interface PlaylistTracks {
  /**
   * A link to the Web API endpoint where full details of
   * the playlist's tracks can be retrieved.
   */
  href: string;
  /**
   * The total number of tracks in the playlist.
   */
  total: Numeric;
}
/**
 * SimplePlaylist contains basic info about a Spotify playlist.
 */
export interface SimplePlaylist {
  /**
   * Indicates whether the playlist owner allows others to modify the playlist.
   * Note: only non-collaborative playlists are currently returned by Spotify's Web API.
   */
  collaborative: boolean;
  /**
   * The playlist description. Empty string if no description is set.
   */
  description: string;
  external_urls: { [key: string]: string };
  /**
   * A link to the Web API endpoint providing full details of the playlist.
   */
  href: string;
  id: ID;
  /**
   * The playlist image.  Note: this field is only  returned for modified,
   * verified playlists. Otherwise the slice is empty.  If returned, the source
   * URL for the image is temporary and will expire in less than a day.
   */
  images: Image[];
  name: string;
  owner: User;
  public: boolean;
  /**
   * The version identifier for the current playlist. Can be supplied in other
   * requests to target a specific playlist version.
   */
  snapshot_id: string;
  /**
   * A collection to the Web API endpoint where full details of the playlist's
   * tracks can be retrieved, along with the total number of tracks in the playlist.
   */
  tracks: PlaylistTracks;
  uri: URI;
}
/**
 * FullPlaylist provides extra playlist data in addition to the data provided by SimplePlaylist.
 */
export interface FullPlaylist {
  SimplePlaylist: SimplePlaylist;
  /**
   * Information about the followers of this playlist.
   */
  followers: Followers;
  tracks: PlaylistTrackPage;
}
/**
 * PlaylistItem contains info about an item in a playlist.
 */
export interface PlaylistItem {
  /**
   * The date and time the track was added to the playlist.
   * You can use the TimestampLayout constant to convert
   * this field to a time.Time value.
   * Warning: very old playlists may not populate this value.
   */
  added_at: string;
  /**
   * The Spotify user who added the track to the playlist.
   * Warning: very old playlists may not populate this value.
   */
  added_by: User;
  /**
   * Whether this track is a local file or not.
   */
  is_local: boolean;
  /**
   * Information about the track.
   */
  track: PlaylistItemTrack;
}
/**
 * PlaylistItemTrack is a union type for both tracks and episodes. If both
 * values are null, it's likely that the piece of content is not available in
 * the configured market.
 */
export interface PlaylistItemTrack {
  Track?: FullTrack;
  Episode?: EpisodePage;
}
/**
 * PlaylistItemPage contains information about items in a playlist.
 */
export interface PlaylistItemPage {
  items: PlaylistItem[];
}
/**
 * TrackToRemove specifies a track to be removed from a playlist.
 * Positions is a slice of 0-based track indices.
 * TrackToRemove is used with RemoveTracksFromPlaylistOpt.
 */
export interface TrackToRemove {
  uri: string;
  positions: number /* int */[];
}
/**
 * PlaylistReorderOptions is used with ReorderPlaylistTracks to reorder
 * a track or group of tracks in a playlist.
 * For example, in a playlist with 10 tracks, you can:
 *   - move the first track to the end of the playlist by setting
 *     RangeStart to 0 and InsertBefore to 10
 *   - move the last track to the beginning of the playlist by setting
 *     RangeStart to 9 and InsertBefore to 0
 *   - Move the last 2 tracks to the beginning of the playlist by setting
 *     RangeStart to 8 and RangeLength to 2.
 */
export interface PlaylistReorderOptions {
  /**
   * The position of the first track to be reordered.
   * This field is required.
   */
  range_start: Numeric;
  /**
   * The amount of tracks to be reordered.  This field is optional.  If
   * you don't set it, the value 1 will be used.
   */
  range_length?: Numeric;
  /**
   * The position where the tracks should be inserted.  To reorder the
   * tracks to the end of the playlist, simply set this to the position
   * after the last track.  This field is required.
   */
  insert_before: Numeric;
  /**
   * The playlist's snapshot ID against which you wish to make the changes.
   * This field is optional.
   */
  snapshot_id?: string;
}

//////////
// source: recommendation.go

/**
 * Seeds contains IDs of artists, genres and/or tracks
 * to be used as seeds for recommendations
 */
export interface Seeds {
  Artists: ID[];
  Tracks: ID[];
  Genres: string[];
}
/**
 * Recommendations contains a list of recommended tracks based on seeds
 */
export interface Recommendations {
  seeds: RecommendationSeed[];
  tracks: SimpleTrack[];
}
/**
 * RecommendationSeed represents a recommendation seed after
 * being processed by the Spotify API
 */
export interface RecommendationSeed {
  afterFilteringSize: Numeric;
  afterRelinkingSize: Numeric;
  href: string;
  id: ID;
  initialPoolSize: Numeric;
  type: string;
}
/**
 * MaxNumberOfSeeds allowed by Spotify for a recommendation request
 */
export const MaxNumberOfSeeds = 5;

//////////
// source: search.go

/**
 * MarketFromToken can be used in place of the Options.Country parameter
 * if the Client has a valid access token.  In this case, the
 * results will be limited to content that is playable in the
 * country associated with the user's account.  The user must have
 * granted access to the user-read-private scope when the access
 * token was issued.
 */
export const MarketFromToken = 'from_token';
/**
 * SearchType represents the type of a query used in the Search function.
 */
export type SearchType = number /* int */;
/**
 * Search type values that can be passed to the Search function.  These are flags
 * that can be bitwise OR'd together to search for multiple types of content simultaneously.
 */
export const SearchTypeAlbum: SearchType = 1 << 0;
/**
 * Search type values that can be passed to the Search function.  These are flags
 * that can be bitwise OR'd together to search for multiple types of content simultaneously.
 */
export const SearchTypeArtist = 1 << 1;
/**
 * Search type values that can be passed to the Search function.  These are flags
 * that can be bitwise OR'd together to search for multiple types of content simultaneously.
 */
export const SearchTypePlaylist = 1 << 2;
/**
 * Search type values that can be passed to the Search function.  These are flags
 * that can be bitwise OR'd together to search for multiple types of content simultaneously.
 */
export const SearchTypeTrack = 1 << 3;
/**
 * Search type values that can be passed to the Search function.  These are flags
 * that can be bitwise OR'd together to search for multiple types of content simultaneously.
 */
export const SearchTypeShow = 1 << 4;
/**
 * Search type values that can be passed to the Search function.  These are flags
 * that can be bitwise OR'd together to search for multiple types of content simultaneously.
 */
export const SearchTypeEpisode = 1 << 5;
/**
 * SearchResult contains the results of a call to Search.
 * Fields that weren't searched for will be nil pointers.
 */
export interface SearchResult {
  artists?: FullArtistPage;
  albums?: SimpleAlbumPage;
  playlists?: SimplePlaylistPage;
  tracks?: FullTrackPage;
  shows?: SimpleShowPage;
  episodes?: SimpleEpisodePage;
}

//////////
// source: show.go

export interface SavedShow {
  /**
   * The date and time the show was saved, represented as an ISO
   * 8601 UTC timestamp with a zero offset (YYYY-MM-DDTHH:MM:SSZ).
   * You can use the TimestampLayout constant to convert this to
   * a time.Time value.
   */
  added_at: string;
  show: FullShow;
}
/**
 * FullShow contains full data about a show.
 */
export interface FullShow {
  SimpleShow: SimpleShow;
  /**
   * A list of the show’s episodes.
   */
  episodes: SimpleEpisodePage;
}
/**
 * SimpleShow contains basic data about a show.
 */
export interface SimpleShow {
  /**
   * A list of the countries in which the show can be played,
   * identified by their ISO 3166-1 alpha-2 code.
   */
  available_markets: string[];
  /**
   * The copyright statements of the show.
   */
  copyrights: Copyright[];
  /**
   * A description of the show.
   */
  description: string;
  /**
   * Whether or not the show has explicit content
   * (true = yes it does; false = no it does not OR unknown).
   */
  explicit: boolean;
  /**
   * Known external URLs for this show.
   */
  external_urls: { [key: string]: string };
  /**
   * A link to the Web API endpoint providing full details
   * of the show.
   */
  href: string;
  /**
   * The SpotifyID for the show.
   */
  id: ID;
  /**
   * The cover art for the show in various sizes,
   * widest first.
   */
  images: Image[];
  /**
   * True if all of the show’s episodes are hosted outside
   * of Spotify’s CDN. This field might be null in some cases.
   */
  is_externally_hosted?: boolean;
  /**
   * A list of the languages used in the show, identified by
   * their ISO 639 code.
   */
  languages: string[];
  /**
   * The media type of the show.
   */
  media_type: string;
  /**
   * The name of the show.
   */
  name: string;
  /**
   * The publisher of the show.
   */
  publisher: string;
  /**
   * The object type: “show”.
   */
  type: string;
  /**
   * The Spotify URI for the show.
   */
  uri: URI;
}
export interface EpisodePage {
  /**
   * A URL to a 30 second preview (MP3 format) of the episode.
   */
  audio_preview_url: string;
  /**
   * A description of the episode.
   */
  description: string;
  /**
   * The episode length in milliseconds.
   */
  duration_ms: Numeric;
  /**
   * Whether or not the episode has explicit content
   * (true = yes it does; false = no it does not OR unknown).
   */
  explicit: boolean;
  /**
   * 	External URLs for this episode.
   */
  external_urls: { [key: string]: string };
  /**
   * A link to the Web API endpoint providing full details of the episode.
   */
  href: string;
  /**
   * The Spotify ID for the episode.
   */
  id: ID;
  /**
   * The cover art for the episode in various sizes, widest first.
   */
  images: Image[];
  /**
   * True if the episode is hosted outside of Spotify’s CDN.
   */
  is_externally_hosted: boolean;
  /**
   * True if the episode is playable in the given market.
   * Otherwise false.
   */
  is_playable: boolean;
  /**
   * A list of the languages used in the episode, identified by their ISO 639 code.
   */
  languages: string[];
  /**
   * The name of the episode.
   */
  name: string;
  /**
   * The date the episode was first released, for example
   * "1981-12-15". Depending on the precision, it might
   * be shown as "1981" or "1981-12".
   */
  release_date: string;
  /**
   * The precision with which release_date value is known:
   * "year", "month", or "day".
   */
  release_date_precision: string;
  /**
   * The user’s most recent position in the episode. Set if the
   * supplied access token is a user token and has the scope
   * user-read-playback-position.
   */
  resume_point: ResumePointObject;
  /**
   * The show on which the episode belongs.
   */
  show: SimpleShow;
  /**
   * The object type: "episode".
   */
  type: string;
  /**
   * The Spotify URI for the episode.
   */
  uri: URI;
}
export interface ResumePointObject {
  /**
   * 	Whether or not the episode has been fully played by the user.
   */
  fully_played: boolean;
  /**
   * The user’s most recent position in the episode in milliseconds.
   */
  resume_position_ms: Numeric;
}

//////////
// source: track.go

export interface TrackExternalIDs {
  isrc: string;
  ean: string;
  upc: string;
}
/**
 * SimpleTrack contains basic info about a track.
 */
export interface SimpleTrack {
  album: SimpleAlbum;
  artists: SimpleArtist[];
  /**
   * A list of the countries in which the track can be played,
   * identified by their ISO 3166-1 alpha-2 codes.
   */
  available_markets: string[];
  /**
   * The disc number (usually 1 unless the album consists of more than one disc).
   */
  disc_number: Numeric;
  /**
   * The length of the track, in milliseconds.
   */
  duration_ms: Numeric;
  /**
   * Whether or not the track has explicit lyrics.
   * true => yes, it does; false => no, it does not.
   */
  explicit: boolean;
  /**
   * External URLs for this track.
   */
  external_urls: { [key: string]: string };
  /**
   * ExternalIDs are IDs for this track in other databases
   */
  external_ids: TrackExternalIDs;
  /**
   * A link to the Web API endpoint providing full details for this track.
   */
  href: string;
  id: ID;
  name: string;
  /**
   * A URL to a 30 second preview (MP3) of the track.
   */
  preview_url: string;
  /**
   * The number of the track.  If an album has several
   * discs, the track number is the number on the specified
   * DiscNumber.
   */
  track_number: Numeric;
  uri: URI;
  /**
   * Type of the track
   */
  type: string;
}
/**
 * LinkedFromInfo
 * See: https://developer.spotify.com/documentation/general/guides/track-relinking-guide/
 */
export interface LinkedFromInfo {
  /**
   * ExternalURLs are the known external APIs for this track or album
   */
  external_urls: { [key: string]: string };
  /**
   * Href is a link to the Web API endpoint providing full details
   */
  href: string;
  /**
   * ID of the linked track
   */
  id: ID;
  /**
   * Type of the link: album of the track
   */
  type: string;
  /**
   * URI is the Spotify URI of the track/album
   */
  uri: string;
}
/**
 * FullTrack provides extra track data in addition to what is provided by SimpleTrack.
 */
export interface FullTrack {
  SimpleTrack: SimpleTrack;
  /**
   * The album on which the track appears. The album object includes a link in href to full information about the album.
   */
  album: SimpleAlbum;
  /**
   * Known external IDs for the track.
   */
  external_ids: { [key: string]: string };
  /**
   * Popularity of the track.  The value will be between 0 and 100,
   * with 100 being the most popular.  The popularity is calculated from
   * both total plays and most recent plays.
   */
  popularity: Numeric;
  /**
   * IsPlayable defines if the track is playable. It's reported when the "market" parameter is passed to the tracks
   * listing API.
   * See: https://developer.spotify.com/documentation/general/guides/track-relinking-guide/
   */
  is_playable?: boolean;
  /**
   * LinkedFrom points to the linked track. It's reported when the "market" parameter is passed to the tracks listing
   * API.
   */
  linked_from?: LinkedFromInfo;
}
/**
 * PlaylistTrack contains info about a track in a playlist.
 */
export interface PlaylistTrack {
  /**
   * The date and time the track was added to the playlist.
   * You can use the TimestampLayout constant to convert
   * this field to a time.Time value.
   * Warning: very old playlists may not populate this value.
   */
  added_at: string;
  /**
   * The Spotify user who added the track to the playlist.
   * Warning: vary old playlists may not populate this value.
   */
  added_by: User;
  /**
   * Whether this track is a local file or not.
   */
  is_local: boolean;
  /**
   * Information about the track.
   */
  track: FullTrack;
}
/**
 * SavedTrack provides info about a track saved to a user's account.
 */
export interface SavedTrack {
  /**
   * The date and time the track was saved, represented as an ISO
   * 8601 UTC timestamp with a zero offset (YYYY-MM-DDTHH:MM:SSZ).
   * You can use the TimestampLayout constant to convert this to
   * a time.Time value.
   */
  added_at: string;
  track: FullTrack;
}

//////////
// source: track_attributes.go

/**
 * TrackAttributes contains various tuneable parameters that can be used for recommendations.
 * For each of the tuneable track attributes, target, min and max values may be provided.
 * Target:
 *   Tracks with the attribute values nearest to the target values will be preferred.
 *   For example, you might request TargetEnergy=0.6 and TargetDanceability=0.8.
 *   All target values will be weighed equally in ranking results.
 * Max:
 *   A hard ceiling on the selected track attribute’s value can be provided.
 *   For example, MaxInstrumentalness=0.35 would filter out most tracks
 *   that are likely to be instrumental.
 * Min:
 *   A hard floor on the selected track attribute’s value can be provided.
 *   For example, min_tempo=140 would restrict results to only those tracks
 *   with a tempo of greater than 140 beats per minute.
 */
export interface TrackAttributes {}

//////////
// source: user.go

/**
 * User contains the basic, publicly available information about a Spotify user.
 */
export interface User {
  /**
   * The name displayed on the user's profile.
   * Note: Spotify currently fails to populate
   * this field when querying for a playlist.
   */
  display_name: string;
  /**
   * Known public external URLs for the user.
   */
  external_urls: { [key: string]: string };
  /**
   * Information about followers of the user.
   */
  followers: Followers;
  /**
   * A link to the Web API endpoint for this user.
   */
  href: string;
  /**
   * The Spotify user ID for the user.
   */
  id: string;
  /**
   * The user's profile image.
   */
  images: Image[] | null;
  /**
   * The Spotify URI for the user.
   */
  uri: URI;
}
/**
 * PrivateUser contains additional information about a user.
 * This data is private and requires user authentication.
 */
export interface PrivateUser {
  User: User;
  /**
   * The country of the user, as set in the user's account profile.
   * An ISO 3166-1 alpha-2 country code.  This field is only available when the
   * current user has granted access to the ScopeUserReadPrivate scope.
   */
  country: string;
  /**
   * The user's email address, as entered by the user when creating their account.
   * Note: this email is UNVERIFIED - there is no proof that it actually
   * belongs to the user.  This field is only available when the current user
   * has granted access to the ScopeUserReadEmail scope.
   */
  email: string;
  /**
   * The user's Spotify subscription level: "premium", "free", etc.
   * The subscription level "open" can be considered the same as "free".
   * This field is only available when the current user has granted access to
   * the ScopeUserReadPrivate scope.
   */
  product: string;
  /**
   * The user's date of birth, in the format 'YYYY-MM-DD'.  You can use
   * the DateLayout constant to convert this to a time.Time value.
   * This field is only available when the current user has granted
   * access to the ScopeUserReadBirthdate scope.
   */
  birthdate: string;
}
